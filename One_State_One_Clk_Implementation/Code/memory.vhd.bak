library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity memory is
    port(
		  clk : in std_logic;
        MWR : in std_logic; --write enable bit
        MDR : in std_logic; --read enable bit
        M_add : in std_logic_vector(15 downto 0);--16 bit address
        M_data_in : in std_logic_vector(15 downto 0); --data input to the memory
        M_data_out : out std_logic_vector(15 downto 0));--data output from the memory
end entity;

architecture memory_arch of memory is
type mem_arr is array( 0 to 63 ) of std_logic_vector(15 downto 0);
signal data : mem_arr := (
    0 => "0000010011100000",
	 1 => "0000011101100010",
	 2 => "0000011101100001",
	 3 => "0000101110000000",
	 4 => "0000000001001010",
	 5 => "0000000010000001",

--	 10 => "0000000000000000",
--	 11 => "0000000000000001",
--	 12 => "0000000000000010",
--	 13 => "0000000000000011",
--	 14 => "0000000000000100",
--	 15 => "0000000000000101",
--	 16 => "0000000000000110",
--	 17 => "0000000000000111",
--	 18 => "0000000000001000",
--	 19 => "1000000000000000",
--	 20 => "0100000000000000",
--	 21 => "0010000000000001",
--	 22 => "0000010000000100",
--	 23 => "0000010100000000",
--	 24 => "1110000000000100",
--	 25 => "0000000001111000",
--	 26 => "0001110000000000",
--	 27 => "0000000111110000",
--	 28 => "1111111000000000",
--	 29 => "1100000000000011",
--	 30 => "1110000000000111",
--	 31 => "0110000000000110",
--	 32 => "1111111111111111",
--	 33 => "0000000011111111",
    others => (others => '0'));
begin
    write_proc: process(clk)
    begin
        if (clk'event and clk = '1') then   --positive clock cycle  
            if (MWR = '1') then
                data(to_integer(unsigned(M_add))) <= M_data_in;
            end if;
		  end if;
    end process write_proc;
	 
	 read_proc: process(MDR)
	 begin
		  if(MDR = '1') then
				M_data_out <= data(to_integer(unsigned(M_add)));
		  end if;
    end process read_proc;
end architecture memory_arch;